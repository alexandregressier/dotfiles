let mapleader = " "

source ~/.vimplug
set sneak
set quickscope

""" Plugin Settings -----------------------------
let g:argtextobj_pairs="(:),{:},[:],<:>"

let g:highlightedyank_highlight_duration = "200"

let g:qs_highlight_on_keys = ['p', 'P', 'y', 'Y']

""" Settings -----------------------------
set showmode
set relativenumber
set number
set scroll=20
set scrolloff=10
set clipboard+=unnamed
set ttimeout

set nomagic
set incsearch
set hlsearch
set ignorecase
set smartcase

set ideastatusicon="gray"


let g:last_command = ''

function! GoToBeginningOfLineOrBlock()
    if col('.') <= col('^')
        normal! {
        let g:last_command = '{'
    else
        normal! ^
        let g:last_command = '^'
    endif
endfunction

function! GoToEndOfLineOrBlock()
    if col('.') >= col('$') - 1
        normal! }
        let g:last_command = '}'
    else
        normal! $
        let g:last_command = '$'
    endif
endfunction

""" Mappings ------------------------------------
"nnoremap q <Action>(ReformatCode)
nnoremap w o
nnoremap W O
nnoremap e x
xnoremap e x
nnoremap t g
nnoremap T g
nnoremap y u
nnoremap u b
nnoremap U [b
nnoremap i k
xnoremap i k
nnoremap I <C-u>
nnoremap o w
xnoremap o w
nnoremap O [w
xnoremap O [w
nnoremap p f

nnoremap a v
nnoremap A V
nnoremap s c
nnoremap S C
nnoremap D x
nnoremap f i
nnoremap F :
nnoremap g .
nnoremap h :call GoToBeginningOfLineOrBlock()<CR>
xnoremap h :call GoToBeginningOfLineOrBlock()<CR>
nnoremap H I
nnoremap j h
xnoremap j h
nnoremap k j
xnoremap k j
sethandler <C-d> n:vim
nnoremap K <C-d>
nnoremap ; :call GoToEndOfLineOrBlock()<CR>
xnoremap ; :call GoToEndOfLineOrBlock()<CR>
nnoremap : A

nnoremap z u
nnoremap Z <C-r>
nnoremap x d
xnoremap x d
nnoremap X dd
nnoremap c y
xnoremap c y
nnoremap C Y
nnoremap v p
nnoremap V P
nnoremap b s

nnoremap <BS> "_x
xnoremap <BS> "_x
sethandler <S-BS> a:vim
nnoremap <S-BS> "_X
xnoremap <S-BS> "_X

function! GoToPreviousBracket()
    let search = @/
    execute "normal! ?("
    let @/ = search
endfunction

function! GoToNetBracket()
    let search = @/
    execute "normal! /[)\\]}>]"
    let @/ = search
endfunction

nnoremap m :call GoToPreviousBracket()<CR>
nnoremap , <C-w><C-w>
nnoremap . :call GoToNextBracket()<CR>

xnoremap / y/<C-r>0
xnoremap ? y/<C-r>0


map <Leader><Leader> <Action>(GotoAction)

" Quit
nmap <Leader>qq <Action>(Exit)
nmap <Leader>qr <Action>(InvalidateCaches)

onoremap u iw
xnoremap u iw

onoremap U [w
xnoremap U [w

onoremap " i"
xnoremap " i"

onoremap ) i)
xnoremap ) i)
onoremap ( a)
xnoremap ( a)

map <Leader>cu <Action>(RenameElement)
