# Fig pre block. Keep at the top of this file.
[[ -f "$HOME/.fig/shell/zshrc.pre.zsh" ]] && builtin source "$HOME/.fig/shell/zshrc.pre.zsh"


# ~/.zshrc – For interactive shells (i.e., a terminal with a prompt)
# Sourced after .zprofile
# (A shell script runs a non-interactive non-login shell)

# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
safe_source "$HOME/.cache/p10k-instant-prompt-${(%):-%n}.zsh"

# Aliases ——————————————————————————————————————————————————————————————————————————————————————————
alias ls='exa'
alias ll='exa --long --header'
alias la='exa --long --header --all'
alias lld='exa --long --header --list-dirs'
alias tree='exa --tree'
alias rm='trash'

alias e="$EDITOR"
alias d='docker'
alias b='gradle-or-gradlew'
alias kt='kotlin'
alias py='python'
alias lg='lazygit'

# Git
alias g='git'
alias gs='git status'
alias ga='git add'
alias gr='git rm'
alias gd='git diff'
alias gc='git commit'
alias gl='git log'
alias gp='git push'

# chezmoi
alias c='chezmoi'
alias ccd="cd $CHEZMOI_ROOT"
alias ce='chezmoi edit'
alias cs='chezmoi status'
alias ca='chezmoi add'
alias cr='chezmoi remove'
alias cdd='chezmoi diff'
alias ct="exa --tree $CHEZMOI_ROOT"
alias cl="git -C $CHEZMOI_ROOT log"
alias cshow="git -C $CHEZMOI_ROOT show"
alias cpush="git -C $CHEZMOI_ROOT push"

# Zsh ——————————————————————————————————————————————————————————————————————————————————————————————
# History – https://unix.stackexchange.com/a/273863
HISTSIZE=1000000000
SAVEHIST=$HISTSIZE
setopt BANG_HIST              # Treat the '!' character specially during expansion
setopt EXTENDED_HISTORY       # Write the history file in the ":start:elapsed;command" format
setopt INC_APPEND_HISTORY     # Write to the history file immediately, not when the shell exits
setopt SHARE_HISTORY          # Share history between all sessions
setopt HIST_EXPIRE_DUPS_FIRST # Expire duplicate entries first when trimming history
setopt HIST_IGNORE_DUPS       # Don't record an entry that was just recorded again
setopt HIST_IGNORE_ALL_DUPS   # Delete old recorded entry if new entry is a duplicate
setopt HIST_FIND_NO_DUPS      # Do not display a line previously found
setopt HIST_IGNORE_SPACE      # Don't record an entry starting with a space
setopt HIST_SAVE_NO_DUPS      # Don't write duplicate entries in the history file
setopt HIST_REDUCE_BLANKS     # Remove superfluous blanks before recording entry
setopt HIST_VERIFY            # Don't execute immediately upon history expansion
setopt HIST_BEEP              # Beep when accessing nonexistent history

# Enable ^* – https://unix.stackexchange.com/a/32472
setopt extendedglob

# https://unix.stackexchange.com/a/197841
setopt emacs

# https://stackoverflow.com/a/29403520
bindkey '^x^_' redo

# https://stackoverflow.com/a/3483679
bindkey '^u' backward-kill-line

# https://stackoverflow.com/a/1438523
autoload -U select-word-style
select-word-style bash

# https://stackoverflow.com/a/903973
autoload -U edit-command-line
zle -N edit-command-line
bindkey '^x^e' edit-command-line

# Scripts ——————————————————————————————————————————————————————————————————————————————————————————
# SSH agent
unset SSH_AGENT_PID
[ "${gnupg_SSH_AUTH_SOCK_by:-0}" -ne $$ ] && export SSH_AUTH_SOCK="$(gpgconf --list-dirs agent-ssh-socket)"

# Zinit
if [[ ! -f $ZINIT_HOME/zinit/zinit.git/zinit.zsh ]]; then
    print -P "%F{33} %F{220}Installing %F{33}ZDHARMA-CONTINUUM%F{220} Initiative Plugin Manager" \
        "(%F{33}zdharma-continuum/zinit%F{220})…%f"
    command mkdir -p "$ZINIT_HOME/zinit" && command chmod g-rwX "$ZINIT_HOME/zinit"
    command git clone https://github.com/zdharma-continuum/zinit "$ZINIT_HOME/zinit/zinit.git" && \
        print -P "%F{33} %F{34}Installation successful.%f%b" || \
        print -P "%F{160} The clone has failed.%f%b"
fi
source "$ZINIT_HOME/zinit/zinit.git/zinit.zsh" # Prepends PATH

# SDKMAN!
safe_source "$SDKMAN_DIR/bin/sdkman-init.sh" # Prepends PATH

# Anaconda
__conda_setup="$("$HOMEBREW_PREFIX/anaconda3/bin/conda" 'shell.zsh' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "$HOMEBREW_PREFIX/anaconda3/etc/profile.d/conda.sh" ]; then
        . "$HOMEBREW_PREFIX/anaconda3/etc/profile.d/conda.sh"
    else
        export PATH="$HOMEBREW_PREFIX/anaconda3/bin:$PATH"
    fi
fi
unset __conda_setup

conda deactivate

# nvm
safe_source "$NVM_DIR/nvm.sh" # Prepends PATH

# rvm
safe_source "$RVM_DIR/scripts/rvm" # Must be last to prepend PATH (o/w rvm shows a warning)

# fzf
safe_source "$HOME/.fzf.zsh" # Appends PATH + Loads auto-completion & keybindings

# Powerlevel10k
safe_source "$HOME/.p10k.zsh" # To customize prompt, run `p10k configure` or edit ~/.p10k.zsh

# zoxide
eval "$(zoxide init zsh --cmd cd)"

# iTerm2
safe_source "$HOME/.iterm2_shell_integration.zsh"

# Zinit ————————————————————————————————————————————————————————————————————————————————————————————
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit

# Load a few important annexes, without Turbo
# (this is currently required for annexes)
zinit light-mode for \
    zdharma-continuum/zinit-annex-as-monitor \
    zdharma-continuum/zinit-annex-bin-gem-node \
    zdharma-continuum/zinit-annex-patch-dl \
    zdharma-continuum/zinit-annex-rust

# Powerlevel10k
zinit ice depth=1 # git clone depth
zinit light romkatv/powerlevel10k

zinit light zsh-users/zsh-autosuggestions
zinit light zdharma/fast-syntax-highlighting

zinit light hlissner/zsh-autopair

zinit light gradle/gradle-completion

zinit snippet OMZ::plugins/dirhistory/dirhistory.plugin.zsh

# Functions ————————————————————————————————————————————————————————————————————————————————————————
tput-colors () {
    for fg_color in {0..7}; do
        set_foreground=$(tput setaf $fg_color)
        for bg_color in {0..7}; do
            set_background=$(tput setab $bg_color)
            echo -n $set_background$set_foreground
            printf ' F:%s B:%s ' $fg_color $bg_color
        done
        echo $(tput sgr0)
    done
}

cjdk () {
    JAVA_VERSION="$1"
    JAVA_HOME="$(/usr/libexec/java_home --version $JAVA_VERSION)"
    java --version
}

cnode () {
    typeset -A node_versions
    node_versions[4]='argon'
    node_versions[6]='boron'
    node_versions[8]='carbon'
    node_versions[10]='dubnium'
    node_versions[12]='erbium'
    node_versions[14]='fermium'
    node_versions[16]='gallium'
    node_versions[18]='hydrogen'
    node_versions[20]='iron'
    node_versions[22]='jod'
    nvm use "lts/${node_versions[$1]}"
}

gradle-or-gradlew () {
    local gradlew_dir
    local dir="$PWD"
    while [[ "$dir" != "$HOME" ]]; do
        if [[ -f "$dir/gradlew" ]]; then
            gradlew_dir="$(realpath --relative-to="$PWD" "$dir")"
            break
        fi
        dir="${dir:h}"
    done
    if [[ -n "$gradlew_dir" ]]; then
        echo "$(tput setaf 4)$gradlew_dir/gradlew$(tput sgr0)"
        "$gradlew_dir/gradlew" "$@"
    else
        echo "$(tput setaf 4)gradle$(tput sgr0)"
        command gradle "$@"
    fi
}


# Fig post block. Keep at the bottom of this file.
[[ -f "$HOME/.fig/shell/zshrc.post.zsh" ]] && builtin source "$HOME/.fig/shell/zshrc.post.zsh"
